
package store.view.employee.author;

import java.awt.Color;
import store.Service.BookService;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

import store.Model.Author;
import store.view.employee.ui.swing.ScrollBar;

import javax.swing.*;

import java.sql.SQLException;

/**
 *
 * @author bourbon
 */
public class TableAuthor extends javax.swing.JPanel {

    private BookService bookService;
    private AddAuthor addAuthor;
    private EditAuthor editAuthor;
    public TableAuthor() {
        bookService = new BookService();
        addAuthor = new AddAuthor();
        initComponents();
        spTable.setVerticalScrollBar(new ScrollBar());
        spTable.getVerticalScrollBar().setBackground(Color.WHITE);
        spTable.getViewport().setBackground(Color.WHITE);
        JPanel p = new JPanel();
        p.setBackground(Color.WHITE);
        spTable.setCorner(JScrollPane.UPPER_RIGHT_CORNER, p);
        loadAuthorsIntoTable();
    }

    private void loadAuthorsIntoTable() {
        try {
            DefaultTableModel model = (DefaultTableModel) AuthorTable.getModel();
            model.setRowCount(0);
            for (Author author : bookService.getAllAuthors()) {
                model.addRow(new Object[] { author.getAuthorID(), author.getAuthorName(),
                        author.getStatus() ? "Active" : "Inactive"
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void searchAuthor() {
        try {
            DefaultTableModel model = (DefaultTableModel) AuthorTable.getModel();
            model.setRowCount(0);
            for (Author author : bookService.getAllAuthors()) {
                if (author.getAuthorName().contains(InputSearch.getText())) {
                    model.addRow(new Object[] { author.getAuthorID(), author.getAuthorName(),
                            author.getStatus() ? "Active" : "Inactive"
                    });
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        spTable = new javax.swing.JScrollPane();
        AuthorTable = new javax.swing.JTable();
        AddButon = new javax.swing.JButton();
        InputSearch = new javax.swing.JTextField();
        SearchButton = new javax.swing.JButton();
        EditButton = new javax.swing.JButton();
        DeleteButton = new javax.swing.JButton();
        RefreshButton = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(1250, 750));

        AuthorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Author ID", "Author Name", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        spTable.setViewportView(AuthorTable);
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>((DefaultTableModel) AuthorTable.getModel());
        AuthorTable.setRowSorter(sorter);

        AddButon.setText("Add Author");
        AddButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButonActionPerformed(evt);
            }
        });

        SearchButton.setText("Search");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        EditButton.setText("Edit");
        EditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditButtonActionPerformed(evt);
            }
        });

        DeleteButton.setText("Delete");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });

        RefreshButton.setText("Refresh");
        RefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spTable)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(InputSearch)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(AddButon)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(DeleteButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(EditButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 585, Short.MAX_VALUE)
                                .addComponent(RefreshButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(SearchButton)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddButon)
                    .addComponent(DeleteButton)
                    .addComponent(EditButton)
                    .addComponent(RefreshButton))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(InputSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchButton))
                .addGap(18, 18, 18)
                .addComponent(spTable, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void EditButtonActionPerformed(java.awt.event.ActionEvent evt) {
        int selectedRowIndex = AuthorTable.getSelectedRow();
        if (selectedRowIndex >= 0) {
            int authorID = (int) AuthorTable.getValueAt(selectedRowIndex, 0);
            editAuthor = new EditAuthor(authorID);
            editAuthor.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Please select an author to edit.", "No Author Selected",
                    JOptionPane.WARNING_MESSAGE);
        }

    }

    private void RefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {
        loadAuthorsIntoTable();
    }

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {
        searchAuthor();
    }

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {
        int selectedRow = AuthorTable.getSelectedRow();
        if (selectedRow >= 0) {
            int authorID = (int) AuthorTable.getValueAt(selectedRow, 0);

            int confirm = JOptionPane.showConfirmDialog(this,
                    "Are you sure you want to delete this author?", "Confirm Deletion",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (confirm == JOptionPane.YES_OPTION) {
                try {
                    bookService.deleteAuthor(authorID);
                    JOptionPane.showMessageDialog(this, "Author has been deleted successfully.",
                            "Deletion Successful", JOptionPane.INFORMATION_MESSAGE);
                    loadAuthorsIntoTable();
                } catch (SQLException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error occurred while deleting the author: " + e.getMessage(),
                            "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {

            JOptionPane.showMessageDialog(this, "Please select an author to delete.", "No Author Selected",
                    JOptionPane.WARNING_MESSAGE);
        }
    }

    private void AddButonActionPerformed(java.awt.event.ActionEvent evt) {
        addAuthor.setVisible(true);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButon;
    private javax.swing.JTable AuthorTable;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JButton EditButton;
    private javax.swing.JTextField InputSearch;
    private javax.swing.JButton RefreshButton;
    private javax.swing.JButton SearchButton;
    private javax.swing.JScrollPane spTable;
    // End of variables declaration//GEN-END:variables
}
