/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package store.view.employee.publisher;

import store.Model.Publisher;
import store.Service.BookService;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

import javax.swing.*;

import java.sql.SQLException;

/**
 *
 * @author bourbon
 */
public class TablePublisher extends javax.swing.JPanel {
    private BookService bookService;
    private AddPublisher addPublisher;
    private EditPublisher editPublisher;

    /**
     * Creates new form TablePublisher
     */
    public TablePublisher() {
        bookService = new BookService();
        addPublisher = new AddPublisher();
        initComponents();
        loadPublisherIntoTable();
    }

    private void loadPublisherIntoTable() {
        try {
            DefaultTableModel model = (DefaultTableModel) TablePublisher.getModel();
            model.setRowCount(0);
            bookService.getAllPublishers().forEach(publisher -> {
                model.addRow(new Object[] { publisher.getPublisherID(), publisher.getPublisherName(),
                        publisher.getStatus() ? "Active" : "Inactive" });
            });

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void searchPublisher() {
        try {
            DefaultTableModel model = (DefaultTableModel) TablePublisher.getModel();
            model.setRowCount(0);
            for (Publisher publisher : bookService.getAllPublishers()) {
                if (publisher.getPublisherName().toLowerCase().contains(InputSearch.getText().toLowerCase())) {
                    model.addRow(new Object[] { publisher.getPublisherID(), publisher.getPublisherName(),
                            publisher.getStatus() ? "Active" : "Inactive" });
                }
            }

        } catch (

        Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SearchButton = new javax.swing.JButton();
        AddButton = new javax.swing.JButton();
        DeleteButton = new javax.swing.JButton();
        InputSearch = new javax.swing.JTextField();
        EditButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablePublisher = new javax.swing.JTable();
        RefreshButton = new javax.swing.JButton();

        SearchButton.setText("Search");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        AddButton.setText("Add");
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });

        DeleteButton.setText("Delete ");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });

        InputSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputSearchActionPerformed(evt);
            }
        });

        EditButton.setText("Edit");
        EditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditButtonActionPerformed(evt);
            }
        });

        TablePublisher.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][] {
                        { null, null, null },
                        { null, null, null },
                        { null, null, null },
                        { null, null, null }
                },
                new String[] {
                        "Publisher ID", "Name", "Status"
                }) {
            Class[] types = new Class[] {
                    java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        });
        jScrollPane1.setViewportView(TablePublisher);
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>((DefaultTableModel) TablePublisher.getModel());
        TablePublisher.setRowSorter(sorter);

        RefreshButton.setText("Refresh");
        RefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(318, 318, 318)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 614,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout
                                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING,
                                                                false)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout
                                                                .createSequentialGroup()
                                                                .addComponent(InputSearch,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE, 227,
                                                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(
                                                                        javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                                        Short.MAX_VALUE)
                                                                .addComponent(SearchButton))
                                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING,
                                                                layout.createSequentialGroup()
                                                                        .addComponent(AddButton)
                                                                        .addGap(32, 32, 32)
                                                                        .addComponent(EditButton)
                                                                        .addGap(115, 115, 115)
                                                                        .addComponent(DeleteButton)))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(RefreshButton)))
                                .addContainerGap(318, Short.MAX_VALUE)));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(84, 84, 84)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(AddButton)
                                        .addComponent(DeleteButton)
                                        .addComponent(EditButton)
                                        .addComponent(RefreshButton))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(SearchButton)
                                        .addComponent(InputSearch, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(28, 28, 28)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(147, Short.MAX_VALUE)));
    }// </editor-fold>//GEN-END:initComponents

    private void RefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_RefreshButtonActionPerformed

        loadPublisherIntoTable();
    }

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {

        searchPublisher();
    }

    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {
        addPublisher.setVisible(true);
    }

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {
        int selectedRow = TablePublisher.getSelectedRow();
        if (selectedRow >= 0) {
            int publisherID = (int) TablePublisher.getValueAt(selectedRow, 0);

            int confirm = JOptionPane.showConfirmDialog(this,
                    "Are you sure you want to delete this author?", "Confirm Deletion",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (confirm == JOptionPane.YES_OPTION) {
                try {
                    bookService.deletePublisher(publisherID);
                    JOptionPane.showMessageDialog(this, "Author has been deleted successfully.",
                            "Deletion Successful", JOptionPane.INFORMATION_MESSAGE);
                    loadPublisherIntoTable();
                } catch (SQLException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error occurred while deleting the author: " + e.getMessage(),
                            "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {

            JOptionPane.showMessageDialog(this, "Please select an author to delete.", "No Author Selected",
                    JOptionPane.WARNING_MESSAGE);
        }
    }

    private void InputSearchActionPerformed(java.awt.event.ActionEvent evt) {

    }

    private void EditButtonActionPerformed(java.awt.event.ActionEvent evt) {
        int selectedRow = TablePublisher.getSelectedRow();
        if (selectedRow >= 0) {
            int publisherID = (int) TablePublisher.getValueAt(selectedRow, 0);

            editPublisher = new EditPublisher(publisherID);
            editPublisher.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Please select an author to edit.", "No Author Selected",
                    JOptionPane.WARNING_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JButton EditButton;
    private javax.swing.JTextField InputSearch;
    private javax.swing.JButton RefreshButton;
    private javax.swing.JButton SearchButton;
    private javax.swing.JTable TablePublisher;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
